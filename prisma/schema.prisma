generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Gender {
  MEN
  WOMEN
}

enum DayOff {
  lundi
  mardi
  mercredi
  jeudi
  vendredi
  samedi
  dimanche
}

enum EmployeeStatus {
  actif
  inactif
  en_vacances
  licencie
  retraite
  en_attente
  demissionne
}

model Employee {
  id         String         @id @unique
  firstName  String         @db.VarChar(50)
  lastName   String         @db.VarChar(50)
  email      String         @unique @db.VarChar(100)
  phone      String         @db.VarChar(15)
  position   String         @db.VarChar(100)
  shiftStart DateTime       @db.Time()
  shiftEnd   DateTime       @db.Time()
  dayOff     DayOff?
  gender     Gender
  status     EmployeeStatus @default(en_attente)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  Attendance Attendance[]
  @@index([email])
  @@index([phone])
}

enum AttendanceCheckInStatus {
  on_time
  late
}

enum AttendanceCheckOutStatus {
  early
  on_time
}

enum AttendanceStatus {
  present
  absent
  day_off
  on_vacation
  remote_work // optional, for remote work
  sick_leave // optional, for sick leave
}

model Attendance {
  id               Int                       @id @default(autoincrement())
  employee         Employee                  @relation(fields: [employeeId], references: [id])
  attendanceStatus AttendanceStatus          @default(present)
  employeeId       String
  date             DateTime                  
  checkInStatus    AttendanceCheckInStatus?
  checkInTime      String?                 
  checkOutStatus   AttendanceCheckOutStatus?
  checkOutTime     String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(150)
  slug      String    @unique @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@index([name])
}

enum ProductStatus {
  draft
  active
  archived
}

model Product {
  id              String        @id @default(cuid())
  name            String        @unique @db.VarChar(150)
  price           Float
  costPrice Float @default(0)
  quantityInStock Int
  threshold       Int
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      String
  status          ProductStatus @default(draft)
  expirationDate  DateTime      @db.Date()
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  SaleItem SaleItem[]
  @@index([name])
}

enum PaymentMethod {
  cash
  credit_card
  moncash
  mobile_payment
  check
}

enum Discount {
  FIXED
  PERCENTAGE
}

enum SaleCategory {
  ROOM
  DRINK 
  FOOD
  OTHER
}

model Sale {
  id             String        @id @default(cuid())
  reference      String        @unique @db.VarChar(10)
  category SaleCategory
  cashier        String        @db.VarChar(100)
  paymentMethod  PaymentMethod @default(cash)
  discount Float?
  subTotal       Float         @default(0)
  tax            Float         @default(0)
  total          Float         @default(0)
  amountReceived Float
  customerChange Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  SaleItem       SaleItem[]
  @@index([reference])
}

model SaleItem {
  id           String   @id @default(cuid())
  product      Product  @relation(fields: [product_id], references: [id])
  sale         Sale     @relation(fields: [saleId], references: [id])
  product_id    String
  saleId       String
  quantity     Int
  unit_price    Int
  total_price    Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  @@index([product_id])
}

enum IdOption {
  passport
  drivers_license
  goverment_issued_id
  student_id
}

model Customer {
  id          String   @id @default(cuid())
  firstName   String   @db.VarChar(50)
  lastName    String   @db.VarChar(50)
  phoneNumber String   @unique @db.VarChar(20)
  email       String   @unique @db.VarChar(50)
  Gender Gender 
  idType      IdOption
  idNumber    String   @db.VarChar(20)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


