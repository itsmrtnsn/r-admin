

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")

}

enum Gender {
  homme
  femme
}

enum DayOff {
  lundi
  mardi
  mercredi
  jeudi
  vendredi
  samedi
  dimanche
}


enum EmployeeStatus {
  actif
  inactif
  en_vacances
  licencie
  retraite
  en_attente
  demissionne
}



model Employee {
  id String @id  @unique
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @unique @db.VarChar(100)
  phone String @db.VarChar(15)
  position String @db.VarChar(100)
  shiftStart DateTime @db.Time()
  shiftEnd DateTime @db.Time()
  dayOff DayOff?
  gender Gender
  status EmployeeStatus @default(en_attente)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([email])
  @@index([phone])

  Attendance Attendance[]
}
enum AttendanceCheckInStatus {
  on_time
  late
}

enum AttendanceCheckOutStatus {
  early
  on_time
}

enum AttendanceStatus {
  present
  absent
  day_off
  on_vacation
  remote_work  // optional, for remote work
  sick_leave   // optional, for sick leave
}

model Attendance {
  id              Int                     @id @default(autoincrement())
  employee        Employee                @relation(fields: [employeeId], references: [id])
  attendanceStatus AttendanceStatus       @default(present)
  employeeId      String
  date            DateTime                @db.Date()
  checkInStatus   AttendanceCheckInStatus?
  checkInTime     DateTime?               @db.Time()
  checkOutStatus  AttendanceCheckOutStatus?
  checkOutTime    DateTime?               @db.Time()
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

model Category {
  id String @id @default(cuid())
  name String @unique @db.VarChar(150)
  slug String @unique @db.VarChar(150)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([name])
  Product Product[]
}
enum ProductStatus {
  draft
  active
  archived
}


model Product {
  id String @id @default(cuid())
  name String @unique @db.VarChar(150)
  price Int
  quantityInStock Int
  threshold Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  status ProductStatus @default(draft)
  expirationDate DateTime @db.Date() @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([name])

  SaleItem SaleItem[]
}



enum PaymentMethod {
  cash
  credit_card
  moncash
  mobile_payment
  check
}

enum SalesType {
  room
  services
  raw_product
}

model Sale {
  id String @id @default(cuid())
  reference String @unique @db.VarChar(12)
  cashier String @db.VarChar(100)
  saleAmount Float @default(0)
  amountReceived Float
  customerChange Float @default(0)
  paymentMethod PaymentMethod @default(cash)
  salesType SalesType @default(raw_product)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  SaleItem SaleItem[]
  @@index([reference])
}


model SaleItem {
  id String @id @default(cuid())
  product Product @relation(fields: [productId], references: [id])
  sale Sale @relation(fields: [saleId], references: [id])
  productId String
  saleId String
  quantity Int
  unitPrice Int
  totalPrice Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([productId])
}

